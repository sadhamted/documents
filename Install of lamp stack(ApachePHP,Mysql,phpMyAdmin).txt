                  Use Case of LAMP Stack Installation (Apache,PHP,Mysql,PHPMyAdmin)
In fact you can have a fully functional LAMP stack by executing only 10-12 command line operations !
-------------------------------------------------------------------------------------------------
Step 1 : Updating the Package List:
            - sudo apt-get update

Step 2 : Install Apache through the following command :
	    - sudo apt-get install apache2

Step 3 : Checking Successful Installation of Apache:
         http://your-ip-address (or http://localhost if you're doing it on a local server). 

Step 4 : Install MySql through the following command :
	     -  sudo apt-get install mysql-server

Step 5 : Checking Successful Installation of MySql:
	     -   mysql -u root -p
----------------------------------------------
If MySql has been installed successfully, you should be prompted for a password. Enter the password which you chose in the above step. You should see the MySql prompt like this :
mysql> 
------Here you can run mysql queries, create tables etc.

Now to go back, exit MySql by typing in the command :
exit
------------------------------------------------------------------------------------------------------------
Step 6 : Install PHP and commonly used extensions :
    	      -   sudo apt-get install php libapache2-mod-php php-mysql php-curl php-gd php-json php-mcrypt php-zip
------------------------------------------------------------------------------------------------------------------
 ------->•MySql Extension : To use MySql functions available in PHP
 ------->•Curl Extension : To make CURL requests through PHP, commonly used in implementing API calls of web services
 ------->•GD Extension : To enable the GD library. PHP uses GD library for image manipulation tasks
 ------->•JSON Extension : To decode and encode JSON through PHP
 ------->•Mcrypt Extension : Contains various encryption functions
 ------->•Zip Extension : Zip and unzip through PHP
 --->>>Also note that libapache2-mod-php is the Apache Module to run PHP. This module provides the connection between Apache and PHP.
-------------------------------------------------------------------------------------------------------------------------

Step 7 : Checking Successful Installation of PHP
         Type the following command :
		- echo "<?php phpinfo(); ?>" | sudo tee /var/www/html/phpinfo.php
-----------------------------------------------------------------------
This will create a phpinfo.php file in the root directory.
 Type this url in the browser http://your-ip-address/phpinfo.php (or http://localhost/phpinfo.php if installing locally). 
--------------------------------------------------------------

Step 8 : Install phpMyAdmin through the commannd :
		- sudo apt-get install phpmyadmin
----------------------------------------------------------------
You will be asked to choose the type of web server. 
The default choice would be apache2. Press space key to select. 
Now press Tab key to highlight the Ok button. Now press the enter key. 
Pressing key in this order is very important, otherwise apache2 will not be selected.
 When selected apache2 would have a * symbol beside it.

You will then be asked whether to configure database for phpmyadmin with dbconfig-common. Choose Yes and click enter.
You will then be asked to enter the password of MySql root account. Enter the password which you typed while installing MySql. Use the Tab key to highlight the Ok button and press enter.

Do the same when asked for password confirmation.
------------------------------------------------------------------
Step 9 : Checking Successful Installation of phpMyAdmin

Visit the url http://your-ip-addrss/phpmyadmin (or http://localhost/phpmyadmin) in your browser. 
If phpMyAdmin is installed successfully, you should see the standard phpMyAdmin login page. 
Type in root as the username, and the MySql password you chose earlier to access the databases.
------------------------------------------------------------------------
Step 10 : Enable Apache Rewrite Module

Enable the Rewrite Module in Apache, so that your application can make use of seo-friendly pretty URLs, such as http://website.com/posts/12/post-on-ubuntu/ (instead of http://website.com?post_id=12). Most probably you will be needing pretty URLs in future, better enable it now.
		- sudo a2enmod rewrite
Now restart Apache so that this change becomes live.
		- sudo service apache2 restart
That's it. You should have a fully functional LAMP stack.
 You can start writing your code now !
------------------------------------------------------------------


 

